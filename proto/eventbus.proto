syntax = "proto3";

package eventbus;

option go_package = "./proto";

// Event message for pub/sub
message Event {
    string topic = 1;
    string sub_topic = 2;
    string client_id = 3;
    bytes message = 4;
    int64 timestamp = 5;
}

// Message for publishing events
message PublishMessage {
    string topic = 1;
    string sub_topic = 2;
    string client_id = 3;
    bytes message = 4;
    int64 timestamp = 5;
    string message_id = 6;
    string origin_server_id = 7;
}

// Response to publish request
message PublishResponse {
    bool success = 1;
    string message = 2;
}

// Subscription request message
message SubscriptionRequest {
    string client_id = 1;
    repeated string topics = 2;
}

// Message for server-to-server replication
message PeerMessage {
    string topic = 1;
    string sub_topic = 2;
    string client_id = 3;
    bytes message = 4;
    int64 timestamp = 5;
    string message_id = 6;
    string origin_server_id = 7;
}

// Response to peer replication
message PeerResponse {
    bool success = 1;
    string message = 2;
}

// Metrics message definitions
message PeerMetricsInfo {
    string address = 1;
    string state = 2;
    int64 connected_duration_seconds = 3;
    int64 last_connected_timestamp = 4;
    int64 reconnect_attempts = 5;
    int64 events_sent = 6;
    int64 events_dropped = 7;
    int32 queue_size = 8;
}

message ServiceMetricsInfo {
    string instance_id = 1;
    int64 uptime_seconds = 2;
    int64 start_timestamp = 3;
    int32 subscriber_count = 4;
    int64 processed_events = 5;
    repeated PeerMetricsInfo peers = 6;
}

message MetricsRequest {}

// The EventBus service definition
service EventBus {
    // Publishes a message to a topic
    rpc Publish(PublishMessage) returns (PublishResponse) {}
    
    // Subscribes to topics
    rpc Subscribe(SubscriptionRequest) returns (stream Event) {}
    
    // Server-to-server message replication
    rpc ReplicateEvent(PeerMessage) returns (PeerResponse) {}
    
    // Get service metrics
    rpc GetMetrics(MetricsRequest) returns (ServiceMetricsInfo) {}
}
